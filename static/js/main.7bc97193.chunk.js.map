{"version":3,"sources":["Components/Header/index.tsx","Components/Modal/index.tsx","Components/Card/index.tsx","Services/api.tsx","Pages/Home/index.tsx","App.tsx","index.tsx"],"names":["Header","className","Modal","props","useState","temp","setTemp","useEffect","data","localStorage","getItem","id","JSON","parse","setItem","stringify","onClick","onClose","name","sensors","model","status","healthscore","toString","specifications","maxTemp","metrics","totalCollectsUptime","totalUptime","lastUptimeAt","unitId","companyId","type","placeholder","onChange","e","tempInput","parseInt","target","value","Card","isModalVisible","setIsModalVisible","href","src","image","alt","title","api","axios","create","baseURL","Home","assets","setAssets","users","setUsers","companies","setCompanies","units","setUnits","healthS","get","params","limit","then","res","i","length","push","fillHealthArray","fillStatusArray","HealthOptions","chart","text","series","StatusOptions","xAxis","categories","map","asset","companie","user","email","unit","highcharts","Highcharts","options","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bc97193.chunk.js","sourcesContent":["import './styles.css'\n\nexport function Header() {\n    return (\n        <>\n            <div className=\"header\">\n                <h1 className=\"logo-title\">Traction Test</h1>\n            </div>\n            <div className=\"line\" />\n\n        </>\n    )\n}\n\n","import { useState, useEffect } from 'react'\nimport { Assets } from '../../Pages/Home'\n\nimport './styles.css'\n\ntype Functions = {\n    onClose: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nexport function Modal(props: Functions & Assets) {\n    const [temp, setTemp] = useState(0)\n\n    useEffect(() => {\n        const data = localStorage.getItem(`temp${props?.id}`)\n        if (data) {\n            setTemp(JSON.parse(data))\n        }\n\n    }, [props.id])\n\n    useEffect(() => {\n        localStorage.setItem(`temp${props?.id}`, JSON.stringify(temp))\n    })\n\n\n    return (\n        <div className=\"modal\">\n            <div className=\"container\">\n                <button className=\"close-btn\" onClick={props.onClose} />\n                <div className=\"modal-content\">\n\n                    <ul key={props.id}>\n                        <li >Asset: {props?.name}</li>\n                        <li >Id: {props?.id}</li>\n                        <li >Sensor: {props?.sensors}</li>\n                        <li >Model: {props?.model}</li>\n                        <li >Temp: {props?.status}</li>\n                        <li >Healthscore: {props?.healthscore}</li>\n                        <li >Max Temperature: {temp > 0 ? (temp.toString()) : (props.specifications?.maxTemp)}</li>\n                        <li >Total Collects Uptime: {props.metrics?.totalCollectsUptime}</li>\n                        <li >Total Uptime: {props.metrics?.totalUptime}</li>\n                        <li >Last Uptime At: {props.metrics?.lastUptimeAt}</li>\n                        <li >Unit id: {props?.unitId}</li>\n                        <li >Company id: {props?.companyId}</li>\n                    </ul>\n\n                    <input className=\"input-modal\" type=\"number\" placeholder=\"Insira a temperatura mÃ¡xima\"\n                        onChange={(e) => {\n                            const tempInput = parseInt(e.target.value)\n                            setTemp(tempInput)\n\n                        }}\n                    >\n                    </input>\n\n\n                </div>\n            </div>\n        </div>\n    )\n\n}\n","import { useState } from 'react';\n\nimport './styles.css'\n\nimport { Assets } from '../../Pages/Home'\nimport { Modal } from '../Modal';\n\ntype CardProps = {\n    title?: string;\n}\n\nexport function Card(props: CardProps & Assets) {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    return (\n        <div>\n            <div className=\"card\" onClick={() => setIsModalVisible(true)}>\n                <a href=\"#start\" className=\"link-card\">\n                    <img src={props.image} alt={props?.name}></img>\n                </a>\n\n            </div>\n            <p className=\"card-title\">{props.title}</p>\n            <div>\n                {isModalVisible ?\n                    <div key={props.id}>\n\n                        <Modal\n                            key={props.id}\n\n                            onClose={() => setIsModalVisible(false)}\n                            name={props?.name}\n                            id={props?.id}\n                            sensors={props?.sensors}\n                            model={props?.model}\n                            status={props?.status}\n                            healthscore={props?.healthscore}\n                            specifications={props?.specifications}\n                            metrics={props?.metrics}\n                            unitId={props?.unitId}\n                            companyId={props?.companyId}\n                        />\n\n                    </div>\n                    : null}\n            </div>\n        </div>\n    )\n}","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'https://my-json-server.typicode.com/tractian/fake-api'\n})\n\nexport default api","import { useEffect, useState } from 'react'\n\nimport { Header } from '../../Components/Header'\nimport { Card } from '../../Components/Card'\nimport api from '../../Services/api'\n\nimport './styles.css'\n\nimport Highcharts from \"highcharts\"\nimport HighchartsReact from 'highcharts-react-official'\n\nexport type Assets = {\n    id?: number;\n    sensors?: string[];\n    model?: string;\n    status?: string;\n    healthscore: number;\n    name?: string;\n    image?: string;\n    specifications?: Specifications;\n    metrics?: Metrics;\n    unitId?: number;\n    companyId?: number;\n}\n\ntype Companies = {\n    id?: number;\n    name?: string;\n}\n\ntype Units = {\n    id?: number;\n    name?: string;\n    companyId?: number;\n}\n\ntype Users = {\n    id?: number;\n    email?: string;\n    name?: string;\n    unitId?: number;\n    companyId?: number;\n}\n\ntype Specifications = {\n    maxTemp?: number;\n}\n\ntype Metrics = {\n    totalCollectsUptime?: number;\n    totalUptime?: number;\n    lastUptimeAt?: string;\n}\n\nexport function Home() {\n    const [assets, setAssets] = useState<Assets[]>([])\n    const [users, setUsers] = useState<Users[]>([])\n    const [companies, setCompanies] = useState<Companies[]>([])\n    const [units, setUnits] = useState<Units[]>([])\n    const healthS: number[] = [];\n    const status: number[] = [0, 0, 0]; // status[0] = inAlert, status[1] = inDowntime, status[2] = inOperation\n\n    function loadAssetsData() {\n        api.get('/assets', { params: { limit: 1 } }).then(res => {\n            setAssets(res.data)\n        })\n    }\n    function loadUsersData() {\n        api.get('/users', { params: { limit: 1 } }).then(res => {\n            setUsers(res.data)\n        })\n    }\n    function loadUnitsData() {\n        api.get('/units', { params: { limit: 1 } }).then(res => {\n            setUnits(res.data)\n        })\n    }\n    function loadCompaniesData() {\n        api.get('/companies', { params: { limit: 1 } }).then(res => {\n            setCompanies(res.data)\n        })\n    }\n\n\n    function fillHealthArray() {\n        for (let i = 0; i < assets.length; i++) {\n            healthS.push(assets[i].healthscore)\n        }\n    }\n\n    function fillStatusArray() {\n        for (let i = 0; i < assets.length; i++) {\n            if (assets[i].status === \"inAlert\") {\n                status[0] = status[0] + 1;\n            }\n            else if (assets[i].status === \"inDowntime\") {\n                status[1] = status[1] + 1;\n            }\n            else {\n                status[2] = status[2] + 1;\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadAssetsData()\n        loadUsersData()\n        loadUnitsData()\n        loadCompaniesData()\n    }, [])\n\n    fillHealthArray();\n    fillStatusArray();\n\n    const HealthOptions = {\n        chart: {\n            type: \"line\"\n\n        },\n        title: {\n            text: ''\n        },\n        series: [\n            {\n                type: 'line',\n                name: 'SaÃºde',\n                data: healthS\n            }\n        ]\n    }\n\n    const StatusOptions = {\n        chart: {\n            type: \"bar\"\n        },\n        title: {\n            text: ''\n        },\n        xAxis: {\n            categories: ['In alert', 'In downtime', 'In operation']\n        },\n        series: [\n            {\n                name: \"Valores\",\n                data: status\n            }\n        ]\n    }\n\n\n    return (\n        <div id=\"start\">\n            <Header />\n            <h1 className=\"title\">Ativos</h1>\n            <div className=\"assets\">\n                {assets.map(asset => {\n                    return (\n                        <div key={asset.id}>\n                            <Card\n                                key={asset.id}\n                                image={asset?.image}\n                                title={asset?.name}\n\n                                name={asset?.name}\n                                id={asset?.id}\n                                sensors={asset?.sensors}\n                                model={asset?.model}\n                                status={asset?.status}\n                                healthscore={asset?.healthscore}\n                                specifications={asset?.specifications}\n                                metrics={asset?.metrics}\n                                unitId={asset?.unitId}\n                                companyId={asset?.companyId}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n\n            <h1 className=\"title\">Empresas</h1>\n            <table className=\"table\">\n                <tbody>\n                    <tr>\n                        <th>Empresa</th>\n                        <th>Id</th>\n                    </tr>\n                    {companies.map(companie => {\n                        return (\n                            <>\n                                <tr>\n                                    <td>{companie.name}</td>\n                                    <td>{companie.id}</td>\n                                </tr>\n                            </>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n            <h1 className=\"title\">UsuÃ¡rios</h1>\n            <table className=\"table\">\n                <tbody>\n                    <tr>\n                        <th>Nome</th>\n                        <th>email</th>\n                        <th>Company Id</th>\n                        <th>Id</th>\n                    </tr>\n                    {users.map(user => {\n                        return (\n                            <>\n                                <tr>\n                                    <td>{user.name}</td>\n                                    <td>{user.email}</td>\n                                    <td>{user.companyId}</td>\n                                    <td>{user.id}</td>\n                                </tr>\n                            </>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n            <h1 className=\"title\">Unidades</h1>\n            <table className=\"table\">\n                <tbody>\n                    <tr>\n                        <th>Nome</th>\n                        <th>Company Id</th>\n                        <th>Id</th>\n                    </tr>\n                    {units.map(unit => {\n                        return (\n                            <>\n                                <tr>\n                                    <td>{unit.name}</td>\n                                    <td>{unit.companyId}</td>\n                                    <td>{unit.id}</td>\n                                </tr>\n                            </>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n            <div className=\"charts-container\">\n                <div>\n                    <h1 className=\"title\">SaÃºde</h1>\n                    <div className=\"chart\">\n                        <HighchartsReact highcharts={Highcharts} options={HealthOptions} />\n                    </div>\n                </div>\n                <div>\n                    <h1 className=\"title\">Status</h1>\n                    <div className=\"chart\">\n                        <HighchartsReact highcharts={Highcharts} options={StatusOptions} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { Home } from './Pages/Home'\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}